def count_wins(dice1, dice2):
    count_dice1_wins = 0
    count_dice2_wins = 0
    for i in dice1:
        for j in dice2:
            if i > j:
                count_dice1_wins += 1
            elif j > i:
                count_dice2_wins += 1
    return (count_dice1_wins, count_dice2_wins)

def find_the_best_dice(dices):
    assert all(len(dice) == 6 for dice in dices)

    n = len(dices)
    best_dice = -1
    for i in range(n):
        is_best_dice = True
        for j in range(n):
            if i == j:
                continue
            count_dice_i_wins, count_dice_j_wins = count_wins(dices[i], dices[j])
            if count_dice_i_wins <= count_dice_j_wins:
                is_best_dice = False
                break
        if is_best_dice:
            best_dice = i
            break
    return best_dice

def compute_strategy(dices):
    assert all(len(dice) == 6 for dice in dices)

    strategy = dict()
    strategy["choose first"] = True
    strategy["first_dice"] = 0
    for i in range(len(dices)):
        strategy[i] = (i + 1) % len(dices)

    res = find_the_best_dice(dices)
    if res != -1:
        strategy["first_dice"] = res
    else:
        strategy["choose_first"] = False
        for i in range(len(dices)):
            for j in range(len(dices)):
                if i != j:
                    dice1_wins, dice2_wins = count_wins(dices[i], dices[j])
                    if dice1_wins < dice2_wins:
                        break
            strategy[i] = j
    return strategy

print(compute_strategy([[1,1,4,6,7,8] , [2,2,2,6,7,7] , [3,3,3,5,5,8] ]))
print(compute_strategy([[4,4,4,4,0,0] , [7,7,3,3,3,3] , [6,6,2,2,2,2] , [5,5,5,1,1,1] ]))
